{"version":3,"sources":["actions/TempActions.js","components/Header.js","components/WeatherIcon.js","actions/CurrentLocationActions.js","helpers/Convert.js","api/ApiAccess.js","components/FavoriteCard.js","pages/FavoritesPage.js","components/Search.js","actions/FavoriteActions.js","components/FavoriteButton.js","components/ForecastCard.js","components/ForecastTemp.js","components/ForecastDate.js","components/Location.js","components/MainCard.js","pages/HomePage.js","App.js","serviceWorker.js","reducers/FavoritesReducer.js","reducers/CurrentLocationReducer.js","reducers/TempReducer.js","reducers/index.js","index.js"],"names":["TempActions","SET_UNITS","val","type","useStyles","makeStyles","theme","root","display","flexDirection","justifyContent","marginTop","button","margin","fontSize","active","borderBottom","Header","dispatch","useDispatch","classes","useState","alignment","setAlignment","window","location","pathname","selected","setSelected","toggleClass","event","target","innerText","Toolbar","className","Typography","variant","title","Button","onClick","color","component","Link","to","ToggleButtonGroup","value","exclusive","onChange","newAlignment","aria-label","ToggleButton","disabled","WeatherIcon","iconNumber","src","alt","CurrentLocationActions","SET_LOCATION","payload","CelsiusToFahrenheit","celsius","apiKey","process","ApiAccess","getLocationKey","a","axios","get","response","data","swal","getLocationWeather","locationKey","getFiveDayForecast","getLocationKeyFromGeo","latitude","longtitude","size","height","width","backgroundColor","cursor","alignItems","section","marginBottom","getAverageTemp","temp","avg","parseInt","Maximum","Value","Minimum","Math","round","Number","EPSILON","FavoriteCard","isFahrenheit","forecast","setForcast","history","useHistory","useEffect","then","Paper","push","DailyForecasts","Day","Icon","Temperature","container","flexWrap","subHeader","FavoritesPage","favorites","useSelector","state","favoritesReducer","tempReducer","Fahrenheit","map","item","index","key","searchBar","searchBox","padding","marginLeft","Search","cities","setCities","undefined","fullList","Key","LocalizedName","console","log","Autocomplete","id","onInputChange","tagName","noOptionsText","options","popupIcon","getOptionSelected","option","getOptionLabel","renderInput","params","TextField","label","find","FavoriteActions","ADD_FAVORITE","REMOVE_FAVORITE","alignSelf","icon","FavoriteButton","isFavorite","nodeRef","useRef","IconButton","toast","CSSTransition","classNames","timeout","enter","exit","in","ref","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","ForecastCard","date","square","Date","toLocaleDateString","weekday","getDayOfTheWeek","ForecastTemp","ForecastDate","dateUTC","getDate","getMonth","getFullYear","Location","minWidth","tempText","MainCard","fiveDayData","current","IconPhrase","EpochDate","HomePage","SetFiveDayData","currentLocationReducer","result","navigator","geolocation","getCurrentPosition","coords","longitude","catch","err","Container","maxWidth","elevation","App","exact","path","Boolean","hostname","match","FavoritesReducer","action","filter","initialState","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2ae8de9a.chunk.js","sourcesContent":["const TempActions = {\r\n    SET_UNITS: val => {\r\n        return {\r\n            type: \"SET_UNITS\"\r\n        };\r\n    },\r\n\r\n};\r\n\r\nexport default TempActions","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link } from \"react-router-dom\";\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport { useDispatch } from \"react-redux\";\r\nimport TempActions from '../actions/TempActions'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginTop: '20px',\r\n  },\r\n  button: {\r\n    margin: '10px',\r\n    fontSize: '20px'\r\n  },\r\n  active: {\r\n    borderBottom: 'solid 2px black'\r\n  }\r\n}));\r\n\r\nexport default function Header() {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const [alignment, setAlignment] = useState('C');\r\n  const [selected, setSelected] = useState(window.location.pathname === '/' ? 'HOME' : 'FAVORITES')\r\n\r\n\r\n  const handleAlignment = (event, newAlignment) => {\r\n    dispatch(TempActions['SET_UNITS']())\r\n    setAlignment(newAlignment);\r\n  };\r\n\r\n  const toggleClass = (event) => {\r\n    setSelected(event.target.innerText)\r\n  }\r\n  return (\r\n    <Toolbar className={classes.root + ' header'}>\r\n      <Typography variant=\"h6\" className={classes.title}>\r\n        Weather App\r\n          </Typography>\r\n      <div>\r\n        <Button onClick={toggleClass} className={(selected === 'HOME' ? classes.active + ' ' : '') + classes.button} color=\"inherit\" component={Link} to='/'>Home</Button>\r\n        <Button onClick={toggleClass} className={(selected === 'FAVORITES' ? classes.active + ' ' : '') + classes.button} color=\"inherit\" component={Link} to='favorites'>Favorites</Button>\r\n      </div>\r\n      <ToggleButtonGroup\r\n        value={alignment}\r\n        exclusive\r\n        onChange={handleAlignment}\r\n        aria-label=\"text alignment\"\r\n      >\r\n        <ToggleButton value=\"C\" aria-label=\"left aligned\" disabled={alignment === 'C' ? true : false}>\r\n          {'\\xB0C'}\r\n        </ToggleButton>\r\n        <ToggleButton value=\"F\" aria-label=\"right aligned\" disabled={alignment === 'F' ? true : false}>\r\n          {'\\xB0F'}\r\n        </ToggleButton>\r\n      </ToggleButtonGroup>\r\n\r\n    </Toolbar>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction WeatherIcon({ iconNumber }) {\r\n    return (\r\n        <img src={`/icons/${iconNumber}.png`} alt='weather-icon'/>\r\n    )\r\n}\r\n\r\nexport default WeatherIcon\r\n","const CurrentLocationActions = {\r\n    SET_LOCATION: val => {\r\n        return {\r\n            type: \"SET_LOCATION\",\r\n            payload: val\r\n        };\r\n    },\r\n\r\n};\r\n\r\nexport default CurrentLocationActions","export const CelsiusToFahrenheit=(celsius)=>{\r\n  return celsius * 9 / 5 + 32;\r\n}","import swal from 'sweetalert';\r\nimport axios from 'axios'\r\n\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\n\r\nconst ApiAccess = {\r\n\r\n\r\n    getLocationKey: async (location) => {\r\n        try {\r\n            let response = await axios.get(process.env.REACT_APP_GET_LOCATION_KEY + apiKey + `&q=${location}`)\r\n            return response.data[0];\r\n        } catch (err) {\r\n            swal(\"error on fetch location key\")\r\n        }\r\n    },\r\n\r\n    getLocationWeather: async (locationKey) => {\r\n        try {\r\n            let response = await axios.get(process.env.REACT_APP_GET_LOCATION_WEATHER + locationKey + `?apikey=${apiKey}&metric=true`)\r\n            return response.data;\r\n        } catch (err) {\r\n            swal(\"error on fetch one day forcast\")\r\n        }\r\n    },\r\n    getFiveDayForecast: async (locationKey) => {\r\n        try {\r\n            let response = await axios.get(process.env.REACT_APP_GET_LOCATION_WEATHER_FIVE_DAY + locationKey + `?apikey=${apiKey}&metric=true`)\r\n            return response.data;\r\n        } catch (err) {\r\n            swal(\"error on fetch five day forcast\")\r\n        }\r\n    },\r\n\r\n    getLocationKeyFromGeo: async (latitude, longtitude) => {\r\n        try {\r\n            let response = await axios.get(process.env.REACT_APP_GET_GEO_LOCATION + apiKey + `&q=${latitude},${longtitude}`)\r\n            return response.data;\r\n        } catch (err) {\r\n            swal(\"error on fetch key from geo\");\r\n        }\r\n    }\r\n}\r\n\r\nexport default ApiAccess;","import React, { useEffect, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport WeatherIcon from './WeatherIcon'\r\nimport { useDispatch } from \"react-redux\";\r\nimport CurrentLocationActions from '../actions/CurrentLocationActions'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { CelsiusToFahrenheit } from '../helpers/Convert'\r\nimport ApiAccess from '../api/ApiAccess'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    size: {\r\n        height: '200px',\r\n        width: '200px',\r\n        backgroundColor: 'white',\r\n        cursor: 'pointer',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        margin:'10px'\r\n    },\r\n    section: {\r\n        marginBottom: '25px',\r\n        fontSize: '1.5rem'\r\n    }\r\n}))\r\n\r\nconst getAverageTemp = (temp) => {\r\n    let avg = (parseInt(temp.Maximum.Value) + parseInt(temp.Minimum.Value)) / 2\r\n    return ((Math.round((avg + Number.EPSILON) * 100) / 100))\r\n}\r\n\r\nfunction FavoriteCard({ location, locationKey, isFahrenheit }) {\r\n    const [forecast, setForcast] = useState()\r\n    const dispatch = useDispatch();\r\n    let history = useHistory()\r\n\r\n    useEffect(() => {\r\n        ApiAccess.getLocationWeather(locationKey).then(response => {\r\n            setForcast(response)\r\n        })\r\n    }, [locationKey])\r\n\r\n    const handleClick = () => {\r\n        dispatch(CurrentLocationActions['SET_LOCATION']({\r\n            locationKey: locationKey,\r\n            location: location\r\n        }))\r\n        history.push('/')\r\n    }\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            {forecast &&\r\n                <Paper\r\n                    className={classes.size}\r\n                    onClick={handleClick}>\r\n                    <div className={classes.section}>\r\n                        {location}\r\n                    </div>\r\n                    <div className={classes.section}>\r\n                        <WeatherIcon iconNumber={forecast && forecast.DailyForecasts[0].Day.Icon} />\r\n                    </div>\r\n                    <div >\r\n                        {\r\n                            forecast\r\n                                &&\r\n                                isFahrenheit\r\n                                ?\r\n                                CelsiusToFahrenheit(getAverageTemp(forecast.DailyForecasts[0].Temperature)) + '\\xB0F'\r\n                                :\r\n                                getAverageTemp(forecast.DailyForecasts[0].Temperature) + '\\xB0C'\r\n                        }\r\n                    </div>\r\n\r\n                </Paper>}\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default FavoriteCard\r\n","import React from 'react'\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport FavoriteCard from '../components/FavoriteCard'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    container: {\r\n        margin: '50px',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n\r\n    },\r\n    subHeader: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        fontSize:'1.5rem'\r\n    }\r\n}))\r\n\r\nfunction FavoritesPage() {\r\n    const classes = useStyles();\r\n    const favorites = useSelector((state) => state.favoritesReducer);\r\n    const isFahrenheit = useSelector((state) => state.tempReducer.Fahrenheit);\r\n    return (\r\n        <div>\r\n            <div className={classes.subHeader}>\r\n                Click a city to go to a five day forecast\r\n            </div>\r\n            <div className={classes.container}>\r\n                {favorites.map((item, index) =>\r\n                    <FavoriteCard key={index} locationKey={item.locationKey} location={item.location} isFahrenheit={isFahrenheit} />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FavoritesPage\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport CurrentLocationActions from \"../actions/CurrentLocationActions\";\r\nimport axios from 'axios'\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport swal from \"sweetalert\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        width: \"100%\",\r\n        margin: \"30px\",\r\n    },\r\n    searchBar: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n    },\r\n    searchBox: {\r\n        backgroundColor: \"white\",\r\n        width: \"400px\",\r\n    },\r\n    button: {\r\n        padding: \"15px\",\r\n        marginLeft: \"5px\",\r\n    },\r\n}));\r\n\r\nexport default function Search() {\r\n    const dispatch = useDispatch();\r\n    const [cities, setCities] = useState([]);\r\n    const [selected, setSelected] = useState(undefined);\r\n    const classes = useStyles();\r\n\r\n    async function handleInputChange(event) {\r\n        if (event.target.value != 0) {\r\n            try {\r\n                let response = await axios.get(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=2Hc18OxAstuPAYeQAG7XMNPzwGaKSSir&q=${event.target.value}`)\r\n                let fullList = [];\r\n                response.data.map((item) => {\r\n                    return fullList.push({\r\n                        locationKey: item.Key,\r\n                        location: item.LocalizedName,\r\n                    });\r\n                });\r\n                setCities(fullList);\r\n                console.log(\"fullList\", fullList)\r\n            } catch (err) {\r\n                swal(\"error on auto complete\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleSelectionChange(event) {\r\n        event.target.tagName=='LI'?setSelected(event.target.innerText):setSelected(undefined)\r\n    }\r\n\r\n    function handleClick() {\r\n        if (selected !== undefined) {\r\n            dispatch(\r\n                CurrentLocationActions[\"SET_LOCATION\"](\r\n                    cities.find((item) => item.location == selected)\r\n                )\r\n            );\r\n        }else{\r\n            swal(\"something went wrong with the search, did you use the keyboard to select? that doesnt work very well\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.searchBar}>\r\n                <Autocomplete\r\n                    className={classes.searchBox + ' search-bar'}\r\n                    id=\"city-search\"\r\n                    onInputChange={handleInputChange}\r\n                    onChange={handleSelectionChange}\r\n                    noOptionsText=\"No result\"\r\n                    options={cities}\r\n                    popupIcon={null}\r\n                    getOptionSelected={(option) => option}\r\n                    getOptionLabel={(option) => option.location}\r\n                    renderInput={(params) => (\r\n                        <TextField {...params} label=\"City Search\" variant=\"outlined\" />\r\n                    )}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    onClick={handleClick}\r\n                >\r\n                    Search\r\n        </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","const FavoriteActions = {\r\n    ADD_FAVORITE: val => {\r\n        return {\r\n            type: \"ADD_FAVORITE\",\r\n            payload: val\r\n        };\r\n    },\r\n    REMOVE_FAVORITE: val => {\r\n        return {\r\n            type: \"REMOVE_FAVORITE\",\r\n            payload: val\r\n        };\r\n    },\r\n};\r\n\r\nexport default FavoriteActions\r\n","import React, { useRef } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport FavoriteActions from \"../actions/FavoriteActions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport './FavoriteButton.css'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    button: {\r\n        height: '50px',\r\n        width: '50px',\r\n        margin: '10px',\r\n        display: 'flex',\r\n        alignItems: 'end',\r\n        alignSelf:'auto'\r\n    },\r\n    icon: {\r\n        width: '50px',\r\n        height: '50px',\r\n        color: 'white'\r\n    }\r\n}))\r\n\r\n\r\n\r\nfunction FavoriteButton({ locationKey, location, isFavorite }) {\r\n    const dispatch = useDispatch();\r\n    const nodeRef = useRef(null)\r\n    const handleClick = () => {\r\n        isFavorite ? (\r\n            dispatch(FavoriteActions['REMOVE_FAVORITE']({\r\n                locationKey: locationKey,\r\n                location: location\r\n            })))\r\n            :\r\n            dispatch(FavoriteActions['ADD_FAVORITE']({\r\n                locationKey: locationKey,\r\n                location: location\r\n            }))\r\n\r\n        isFavorite ? toast(`${location} removed from favorites`) : toast(`${location} added to favorites`)\r\n    }\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <IconButton size='small' className={classes.button + ' fav'} onClick={handleClick}>\r\n                {isFavorite\r\n                    ?\r\n                    <CSSTransition\r\n                        nodeRef={nodeRef}\r\n                        classNames=\"favorite-button\"\r\n                        timeout={{ enter: 500, exit: 300 }}\r\n                        in={isFavorite}\r\n                    >\r\n                        <FavoriteIcon ref={nodeRef} className={classes.icon} />\r\n                    </CSSTransition>\r\n                    :\r\n                    <CSSTransition\r\n                        nodeRef={nodeRef}\r\n                        classNames=\"favorite-button\"\r\n                        timeout={{ enter: 500, exit: 200 }}\r\n                        in={isFavorite}\r\n                    >\r\n                        <FavoriteBorderIcon ref={nodeRef} className={classes.icon} />\r\n                    </CSSTransition>\r\n\r\n                }\r\n\r\n            </IconButton>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={2000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default FavoriteButton\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { CelsiusToFahrenheit } from '../helpers/Convert'\r\n\r\nimport WeatherIcon from './WeatherIcon'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    size: {\r\n        height: '200px',\r\n        width: '100%',\r\n        backgroundColor: 'white',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n    section: {\r\n        marginBottom: '25px',\r\n        fontSize: '1.5rem'\r\n    }\r\n}))\r\n\r\nconst getDayOfTheWeek = (date) => {\r\n    let day = new Date(date * 1000).toLocaleDateString('en-us', { weekday: 'long' })\r\n    return day\r\n}\r\n\r\nconst getAverageTemp = (temp) => {\r\n    let avg = (parseInt(temp.Maximum.Value) + parseInt(temp.Minimum.Value)) / 2\r\n    return ((Math.round((avg + Number.EPSILON) * 100) / 100))\r\n}\r\n\r\nfunction ForecastCard({ temp, date, iconNumber, isFahrenheit }) {\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Paper square className={classes.size}>\r\n\r\n            <div className={classes.section}>\r\n                {getDayOfTheWeek(date)}\r\n            </div>\r\n            <div className={classes.section}>\r\n                <WeatherIcon iconNumber={iconNumber} />\r\n            </div>\r\n            <div>\r\n                {\r\n                    isFahrenheit\r\n                        ?\r\n                        CelsiusToFahrenheit(getAverageTemp(temp)) + '\\xB0F'\r\n                        :\r\n                        getAverageTemp(temp) + '\\xB0C'\r\n                }\r\n            </div>\r\n\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default ForecastCard\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { CelsiusToFahrenheit } from '../helpers/Convert'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    size: {\r\n        height: '200px',\r\n        width: '250px',\r\n        fontSize: '150px',\r\n\r\n    },\r\n}))\r\n\r\nconst getAverageTemp = (temp) => {\r\n    let avg = (parseInt(temp.Maximum.Value) + parseInt(temp.Minimum.Value)) / 2\r\n    return ((Math.round((avg + Number.EPSILON) * 100) / 100))\r\n}\r\n\r\nfunction ForecastTemp({ temp, isFahrenheit }) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.size + ' forecast-temp'}>\r\n            {isFahrenheit\r\n                ? CelsiusToFahrenheit(getAverageTemp(temp)) + '\\xB0F'\r\n                : getAverageTemp(temp) + '\\xB0C'\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForecastTemp\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    size: {\r\n        height: '200px',\r\n        width: '250px',\r\n        fontSize: '37px',\r\n        display:'flex',\r\n        flexDirection:'column'\r\n    },\r\n}))\r\n\r\nconst getDayOfTheWeek = (date) => {\r\n    let day = new Date(date * 1000).toLocaleDateString('en-us', { weekday: 'long' })\r\n    return day\r\n}\r\nconst getDate=(date)=>{\r\n    let dateUTC = new Date(date * 1000)\r\n    return dateUTC.getDate()+'/'+dateUTC.getMonth()+'/'+dateUTC.getFullYear()\r\n\r\n}\r\n\r\nexport default function ForecastDate({ date }) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.size + ' forecast-date'}>\r\n            <div >{getDayOfTheWeek(date)}</div>\r\n            <div>{getDate(date)}</div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    size: {\r\n        height: '200px',\r\n        width: '350px',\r\n        fontSize: '37px'\r\n    },\r\n}))\r\nexport default function Location({ location }) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.size + ' location'}>{location}</div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from \"react-redux\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport FavoriteButton from './FavoriteButton'\r\nimport ForecastCard from './ForecastCard'\r\nimport ForecastTemp from './ForecastTemp'\r\nimport ForecastDate from './ForecastDate'\r\nimport WeatherIcon from './WeatherIcon'\r\nimport Location from './Location'\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    size: {\r\n        height: '100px',\r\n        minWidth: '100px',\r\n        margin: '10px'\r\n    },\r\n    tempText: {\r\n        fontSize: '50px'\r\n    }\r\n}))\r\n\r\n\r\nfunction MainCard({ fiveDayData, current, isFahrenheit }) {\r\n    const classes = useStyles();\r\n    const favorites = useSelector((state) => state.favoritesReducer);\r\n    return (\r\n        <div className='wrapper'>\r\n            <div className={classes.tempText + ' icon'}>\r\n                {fiveDayData.DailyForecasts[0].Day.IconPhrase}\r\n                <WeatherIcon iconNumber={fiveDayData.DailyForecasts[0].Day.Icon} />\r\n            </div>\r\n            {favorites.find(item =>\r\n                item.location === current.location\r\n            ) ? <FavoriteButton locationKey={current.locationKey} location={current.location} isFavorite={true} /> :\r\n                <FavoriteButton locationKey={current.locationKey} location={current.location} isFavorite={false} />\r\n            }\r\n            <ForecastDate date={fiveDayData.DailyForecasts[0].EpochDate} />\r\n            <ForecastTemp temp={fiveDayData.DailyForecasts[0].Temperature} isFahrenheit={isFahrenheit} />\r\n            <Location location={current.location} />\r\n            <div className='forecast-card-holder'>\r\n                {fiveDayData.DailyForecasts.map((item, index) => {\r\n                    return <ForecastCard key={index} temp={item.Temperature} date={item.EpochDate} iconNumber={item.Day.Icon} isFahrenheit={isFahrenheit} />\r\n                }\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainCard\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n\r\nimport Search from '../components/Search'\r\nimport CurrentLocationActions from '../actions/CurrentLocationActions'\r\nimport MainCard from '../components/MainCard'\r\nimport ApiAccess from '../api/ApiAccess'\r\n\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport swal from 'sweetalert';\r\n\r\nimport './HomePage.css'\r\n\r\nfunction HomePage() {\r\n    const dispatch = useDispatch();\r\n    const [fiveDayData, SetFiveDayData] = useState()\r\n    const favorites = useSelector((state) => state.favoritesReducer);\r\n    const current = useSelector((state) => state.currentLocationReducer);\r\n    const isFahrenheit = useSelector((state) => state.tempReducer.Fahrenheit);\r\n\r\n    useEffect(() => {\r\n        if (current.locationKey) {\r\n            ApiAccess.getFiveDayForecast(current.locationKey)\r\n                .then(result => {\r\n                    SetFiveDayData(result)\r\n                })\r\n        } else {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition((position) => {\r\n                    ApiAccess.getLocationKeyFromGeo(position.coords.latitude, position.coords.longitude)\r\n                        .then((location => {\r\n                            dispatch(CurrentLocationActions['SET_LOCATION'](\r\n                                {\r\n                                    locationKey: location.Key,\r\n                                    location: location.LocalizedName\r\n                                }\r\n                            ))\r\n                        })).catch(err => {\r\n                            swal('error in geo location')\r\n                        })\r\n                })\r\n            } else {\r\n                ApiAccess.getLocationKey(\"tel aviv\")\r\n                    .then((location => {\r\n                        dispatch(CurrentLocationActions['SET_LOCATION'](\r\n                            {\r\n                                locationKey: location.Key,\r\n                                location: location.LocalizedName\r\n                            }\r\n                        ))\r\n                    }))\r\n                    .catch(err => {\r\n                        swal('error in getLocationKey')\r\n                    })\r\n            }\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [current])\r\n\r\n    return (\r\n        <>\r\n            <Container maxWidth='lg'>\r\n                <Search />\r\n                <Paper elevation={10}>\r\n                    {\r\n                        fiveDayData\r\n                        &&\r\n                        <MainCard fiveDayData={fiveDayData} current={current} isFahrenheit={isFahrenheit} favorites={favorites} />\r\n                    }\r\n                </Paper>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header'\r\n\r\nimport FavoritesPage from './pages/FavoritesPage'\r\nimport HomePage from './pages/HomePage'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      \r\n      <Router>\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <HomePage />\r\n          </Route>\r\n          <Route exact path=\"/favorites\">\r\n            <FavoritesPage />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </>);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const FavoritesReducer = (state = [], action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'ADD_FAVORITE':\r\n\t\t\treturn [...state, action.payload]\r\n\t\tcase 'REMOVE_FAVORITE':\r\n\t\t\treturn [...state.filter(item=>item.location!==action.payload.location)]\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default FavoritesReducer;","const initialState = {\r\n    location:'',\r\n    locationKey:''\r\n  };\r\n  \r\n  const currentLocationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case \"SET_LOCATION\":\r\n        return {\r\n          ...state,\r\n          location: action.payload.location,\r\n          locationKey:action.payload.locationKey\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  export default currentLocationReducer;","const initialState = {\r\n    Fahrenheit:false\r\n  };\r\n  \r\n  const tempReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case \"SET_UNITS\":\r\n        return {\r\n          ...state,\r\n          Fahrenheit:!state.Fahrenheit\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  export default tempReducer;","\r\nimport { combineReducers } from 'redux';\r\nimport favoritesReducer from './FavoritesReducer';\r\nimport currentLocationReducer from './CurrentLocationReducer'\r\nimport tempReducer from './TempReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n\tfavoritesReducer,\r\n\tcurrentLocationReducer,\r\n\ttempReducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\nimport { Provider } from 'react-redux';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}